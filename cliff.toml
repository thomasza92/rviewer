# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits -%}
        {% if commit.merge_commit == false -%}
            {%- if commit.remote.username != "github-actions[bot]" %}
                {%- if not commit.scope -%}
                    {{ self::print_commit(commit=commit) }}
                {% endif -%}
            {%- endif -%}
        {%- endif -%}
    {% endfor -%}
{% endfor -%}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
    {% if contributor.username != "github-actions[bot]" %}
      * [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) made their first contribution! 🥳
        {%- if contributor.pr_number %} in \
          [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
        {%- endif %}
    {% endif %}
{%- endfor %}\n
"""
# template for the changelog footer
footer = """
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^[a|A]dd", group = "<!-- 0 -->⛰️  Features" },
    { message = "^.*: add", group = "<!-- 0 -->⛰️  Features" },
    { message = "^[c|C]reate", group = "<!-- 0 -->⛰️  Features" },
    { message = "^.*: create", group = "<!-- 0 -->⛰️  Features" },
    { message = "^[f|F]eat", group = "<!-- 0 -->⛰️  Features" },
    { message = "^.*: feat", group = "<!-- 0 -->⛰️  Features" },
    { message = "^[f|F]ix", group = "<!-- 1 -->🛠️ Fixes" },
    { message = "^.*: fix", group = "<!-- 1 -->🛠️ Fixes" },
    { message = "^[r|R]emove", group = "<!-- 2 -->🚜 Removals" },
    { message = "^.*: remove", group = "<!-- 2 -->🚜 Removals" },
    { message = "^[d|D]elete", group = "<!-- 2 -->🚜 Removals" },
    { message = "^.*: delete", group = "<!-- 2 -->🚜 Removals" },
    { message = "^[r|R]efactor", group = "<!-- 2 -->🚜 Refactored" },
    { message = "^.*: refactor", group = "<!-- 2 -->🚜 Refactored" },
    { message = "^refactor\\(clippy\\)", skip = true },
    { message = "^[d|D]ocs", group = "<!-- 3 -->📚 Documentation" },
    { message = "^.*: docs", group = "<!-- 3 -->📚 Documentation" },
    { message = "^[p|P]erformance", group = "<!-- 4 -->⚡ Performance" },
    { message = "^.*: perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^[s|S]tyled", group = "<!-- 5 -->🎨 Styling" },
    { message = "^.*: styled", group = "<!-- 5 -->🎨 Styling" },
    { message = "^[t|T]est", group = "<!-- 6 -->🧪 Testing" },
    { message = "^.*: test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
    { message = "^[r|R]evert", group = "<!-- 9 -->◀️ Reversions" },
    { message = "^.*: revert", group = "<!-- 9 -->◀️ Reversions" },
    { message = "^[r|R]ollback", group = "<!-- 9 -->◀️ Reversions" },
    { message = "^.*: rollback", group = "<!-- 9 -->◀️ Reversions" },
    { message = "^[c|C]hange", group = "<!-- 10 -->♻️  Changes" },
    { message = "^.*: change", group = "<!-- 10 -->♻️  Changes" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"